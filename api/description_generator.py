from langchain_core.prompts import PromptTemplate
from langchain_community.document_loaders import YoutubeLoader
from langchain_community.document_loaders.youtube import TranscriptFormat
from langchain_together import ChatTogether
from langchain.output_parsers import PydanticOutputParser
from pydantic import BaseModel, Field, field_validator
from typing import List
from youtube_transcript_api._errors import TranscriptsDisabled, NoTranscriptFound

llm = ChatTogether(
    model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
    temperature=1,
    max_tokens=1300,
    together_api_key="a273b5e896ad97ffca1ce98a227e8f8209a5c530a2dffc3b79e7f3979fe8341a",
)

#d√©finition d'une structure de donn√©es
class yt_description(BaseModel):
    title: str = Field(description="video description title")
    resume: str = Field(description="video description resume")
    links: List[dict] = Field(description="video description links")
    timestamps: str = Field(description="video description timestamps")
    keywords: str = Field(description="video description keywords")
    call_to_action: str = Field(description="video description hashtags")
    about_channel: str = Field(description="video description about channel")


    @field_validator("keywords")
    @classmethod
    def keywords_must_be_list(cls, field):
        if not isinstance(field, str) or "," not in field:
            raise ValueError("Les mots cl√©s doivent √™tre s√©par√©s par des virgules et √™tre une string.")
        return field


def process_video(data):

    if data["timestamps_mode"] == "manuel":
        timestamps_instruction = f"Utiliser ces timestamps : {data['manual_timestamps']}"
    else:
        timestamps_instruction = "G√©n√®re automatiquement 4 √† 7 timestamps cl√©s avec des titres courts et pertinents."

    data["timestamps_instruction"] = timestamps_instruction

    # Chargement de la transcription
    try:
        loader = YoutubeLoader.from_youtube_url(
            data['video_url'],
            add_video_info=False,
            transcript_format=TranscriptFormat.CHUNKS,
            chunk_size_seconds=4,
            language=["fr", "id"],
            translation="fr",
        )
        docs = loader.load()
    except (TranscriptsDisabled, NoTranscriptFound, Exception) as e:
        return {"error": f"Impossible de r√©cup√©rer la transcription : {str(e)}"}

    # Nettoyage de la sortie pour garder uniquement les timecodes et le texte
    transcript = "\n".join([f"{chunk.page_content} - {chunk.metadata['start_timestamp']}" for chunk in docs])
    data['transcript'] = transcript

    #cr√©ation d'un parseur de donn√©es
    parser = PydanticOutputParser(pydantic_object=yt_description)

    # D√©finition du prompt
    prompt = PromptTemplate(
        input_variables=[
            "video_type",
            "video_url",
            "description_tone",
            "optional_keywords",
            "transcript_format",
            "transcript",
            "languages",
            "translation",
            "hashtags",
            "timestamps_mode",
            "timestamps_instruction",
            "useful_links",
        ],
        partial_variables={"format_instructions": parser.get_format_instructions()},
        template="""
Tu es un expert YouTube et sp√©cialiste SEO.

Ta mission est de produire une description de vid√©o YouTube optimis√©e pour :
- attirer l'attention d√®s les premi√®res secondes
- booster le SEO avec les bons mots-cl√©s et hashtags
- encourager les likes, commentaires et abonnements
- s'adapter au type de vid√©o ({video_type}) et au ton demand√© ({description_tone})

Tu dois t'appuyer sur :
- la transcription suivante au format {transcript_format} : {transcript}
- la langue principale : {languages}
- la traduction √©ventuelle : {translation}
- les mots-cl√©s suppl√©mentaires (optionnels) : {optional_keywords}
- les hashtags sugg√©r√©s : {hashtags}
- les indications pour le chapitrage : {timestamps_instruction}
- les liens utiles fournis : {useful_links}

---

üéØ **Consignes de sortie** :
Ne retourne rien d'autre que ce JSON avec les champs suivants :
1. "title" (1‚Äì2 phrases)
   ‚Üí Adresse-toi directement au spectateur en utilisant un ton {description_tone}.
   **Exemple** :
   Tu veux d√©couvrir comment j'ai transform√© ma routine quotidienne pour booster ma productivit√© ? Regarde cette vid√©o jusqu'au bout !

2. "resume"
   ‚Üí R√©sume en quelques phrases ce que le spectateur va apprendre ou d√©couvrir dans la vid√©o. Sois personnel et engageant.
   **Exemple** :
   Dans cette vid√©o, je partage avec toi mes astuces pour organiser efficacement ta journ√©e et atteindre tes objectifs plus rapidement.

3. "links" (liste avec titre + lien) √† partir des donn√©es d'entr√©e. Utilise les liens fournis dans la variable {useful_links} sous ce format :
   Exemple :
   üîó Liens utiles
   Mon planner pr√©f√©r√© : https://monplanner.com
   Application de gestion du temps : https://gestiondutemps.app

4. "timestamps"
   ‚Üí G√©n√©re une section chapitr√©e en texte (pas en tableau), suivant les consignes suivantes : {timestamps_instruction}
   Utilise le mode de timestamps : {timestamps_mode}
   **Exemple** :
   ‚è±Ô∏èChapitrages :
   00:00 ‚Äì Introduction
   01:30 ‚Äì Astuce n¬∞1 : Planification
   03:45 ‚Äì Astuce n¬∞2 : Gestion du temps
   06:10 ‚Äì Astuce n¬∞3 : √âlimination des distractions
   08:25 ‚Äì Conclusion

5.  "keywords"
   ‚Üí Int√®gre les mots-cl√©s ({optional_keywords}) et hashtags ({hashtags}) de mani√®re naturelle dans la description.
   **Exemple** :
   Mots-cl√©s : productivit√©, organisation, gestion du temps
   #Productivit√© #Organisation #GestionDuTemps

6. "call_to_action"
   ‚Üí Encourage le spectateur √† liker, commenter, s'abonner et partager la vid√©o.
   **Exemple** :
   Si tu as aim√© cette vid√©o, n'oublie pas de liker üëç, de t'abonner üîî et de partager avec tes amis ! Dis-moi en commentaire quelle astuce tu vas essayer en premier.

7. "about_channel"
   ‚Üí Ajoute une br√®ve pr√©sentation de la cha√Æne et invite √† explorer d'autres contenus.

---

Tu peux t'inspirer du style de description utilis√© par les meilleurs cr√©ateurs de contenu YouTube dans ta th√©matique. Rends chaque section fluide, humaine et coh√©rente.

 L'objectif est de produire une description compl√®te, engageante et parfaitement optimis√©e √† partir de la vid√©o suivante : {video_url}

N'oublie pas d'utiliser des **pronoms personnels** ("je", "tu", "nous") pour cr√©er une relation directe avec le spectateur.

""",

    )

    # Formatage du prompt
    #formatted_prompt = prompt.format(**data_test)

    # Passage de la requ√™te au LLM
    #response = llm.invoke([("human", formatted_prompt)])
    #return response.content

    #cr√©ation d'une chain
    chain = prompt | llm | parser
    result = chain.invoke(data)
    return result

